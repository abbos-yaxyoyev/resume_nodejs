"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fastify_1 = tslib_1.__importDefault(require("fastify"));
const fastify_cors_1 = tslib_1.__importDefault(require("fastify-cors"));
const fastify_file_upload_await_1 = tslib_1.__importDefault(require("fastify-file-upload-await"));
const fastify_static_1 = tslib_1.__importDefault(require("fastify-static"));
const path_1 = tslib_1.__importDefault(require("path"));
require("reflect-metadata");
//! .env file in config fle
const config_1 = require("../common/config");
//! plugin
const db_1 = require("../common/db/db");
const reply_decorator_1 = require("../common/decorators/reply.decorator");
const authPlugin_1 = require("../common/plugin/authPlugin");
const routes_1 = require("./routes");
const server = (0, fastify_1.default)({ logger: true });
server.register(fastify_cors_1.default, { origin: true });
//! upload files
server.register(fastify_static_1.default, {
    root: path_1.default.join(__dirname, '../../', 'public'),
    // prefix: '/public'
});
// server.register(fastifyFileUpload);
server.register(fastify_file_upload_await_1.default);
server.register(db_1.dbPlugin);
server.register(authPlugin_1.authPlugin);
server.register(reply_decorator_1.replyDecorator);
server.register(routes_1.routesPlugin);
async function start() {
    console.log('ENV.USER_PORT: ', config_1.ENV.USER_PORT);
    console.log('ENV.HOST: ', config_1.ENV.HOST);
    try {
        const options = {
            host: config_1.ENV.HOST,
            port: config_1.ENV.USER_PORT,
        };
        await server.listen(options);
        server.log.info(server.route);
        server.log.info('Started user successfully');
    }
    catch (error) {
        console.log('error user: ', error);
        process.exit(1);
    }
}
start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZXIvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhEQUE4QjtBQUM5Qix3RUFBdUM7QUFDdkMsa0dBQStEO0FBQy9ELDRFQUEyQztBQUMzQyx3REFBd0I7QUFDeEIsNEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiw2Q0FBdUM7QUFDdkMsVUFBVTtBQUNWLHdDQUEyQztBQUMzQywwRUFBc0U7QUFDdEUsNERBQXlEO0FBQ3pELHFDQUF3QztBQUV4QyxNQUFNLE1BQU0sR0FBRyxJQUFBLGlCQUFPLEVBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN6QyxNQUFNLENBQUMsUUFBUSxDQUFDLHNCQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUvQyxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyx3QkFBYSxFQUFFO0lBQzdCLElBQUksRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO0lBQzlDLG9CQUFvQjtDQUNyQixDQUFDLENBQUM7QUFDSCxzQ0FBc0M7QUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxtQ0FBc0IsQ0FBQyxDQUFDO0FBRXhDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBUSxDQUFDLENBQUM7QUFDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyx1QkFBVSxDQUFDLENBQUM7QUFDNUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQ0FBYyxDQUFDLENBQUM7QUFDaEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxxQkFBWSxDQUFDLENBQUM7QUFFOUIsS0FBSyxVQUFVLEtBQUs7SUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxZQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsWUFBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXBDLElBQUk7UUFDRixNQUFNLE9BQU8sR0FBRztZQUNkLElBQUksRUFBRSxZQUFHLENBQUMsSUFBSTtZQUNkLElBQUksRUFBRSxZQUFHLENBQUMsU0FBUztTQUNwQixDQUFDO1FBRUYsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQzlDO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pCO0FBQ0gsQ0FBQztBQUVELEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZhc3RpZnkgZnJvbSAnZmFzdGlmeSc7XHJcbmltcG9ydCBGYXN0aWZ5Q29ycyBmcm9tICdmYXN0aWZ5LWNvcnMnO1xyXG5pbXBvcnQgZmFzdGlmeUZpbGVVcGxvYWRBd2FpdCBmcm9tICdmYXN0aWZ5LWZpbGUtdXBsb2FkLWF3YWl0JztcclxuaW1wb3J0IGZhc3RpZnlTdGF0aWMgZnJvbSAnZmFzdGlmeS1zdGF0aWMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcclxuLy8hIC5lbnYgZmlsZSBpbiBjb25maWcgZmxlXHJcbmltcG9ydCB7IEVOViB9IGZyb20gJy4uL2NvbW1vbi9jb25maWcnO1xyXG4vLyEgcGx1Z2luXHJcbmltcG9ydCB7IGRiUGx1Z2luIH0gZnJvbSAnLi4vY29tbW9uL2RiL2RiJztcclxuaW1wb3J0IHsgcmVwbHlEZWNvcmF0b3IgfSBmcm9tICcuLi9jb21tb24vZGVjb3JhdG9ycy9yZXBseS5kZWNvcmF0b3InO1xyXG5pbXBvcnQgeyBhdXRoUGx1Z2luIH0gZnJvbSAnLi4vY29tbW9uL3BsdWdpbi9hdXRoUGx1Z2luJztcclxuaW1wb3J0IHsgcm91dGVzUGx1Z2luIH0gZnJvbSAnLi9yb3V0ZXMnO1xyXG5cclxuY29uc3Qgc2VydmVyID0gZmFzdGlmeSh7IGxvZ2dlcjogdHJ1ZSB9KTtcclxuc2VydmVyLnJlZ2lzdGVyKEZhc3RpZnlDb3JzLCB7IG9yaWdpbjogdHJ1ZSB9KTtcclxuXHJcbi8vISB1cGxvYWQgZmlsZXNcclxuc2VydmVyLnJlZ2lzdGVyKGZhc3RpZnlTdGF0aWMsIHtcclxuICByb290OiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vJywgJ3B1YmxpYycpLFxyXG4gIC8vIHByZWZpeDogJy9wdWJsaWMnXHJcbn0pO1xyXG4vLyBzZXJ2ZXIucmVnaXN0ZXIoZmFzdGlmeUZpbGVVcGxvYWQpO1xyXG5zZXJ2ZXIucmVnaXN0ZXIoZmFzdGlmeUZpbGVVcGxvYWRBd2FpdCk7XHJcblxyXG5zZXJ2ZXIucmVnaXN0ZXIoZGJQbHVnaW4pO1xyXG5zZXJ2ZXIucmVnaXN0ZXIoYXV0aFBsdWdpbik7XHJcbnNlcnZlci5yZWdpc3RlcihyZXBseURlY29yYXRvcik7XHJcbnNlcnZlci5yZWdpc3Rlcihyb3V0ZXNQbHVnaW4pO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7XHJcbiAgY29uc29sZS5sb2coJ0VOVi5VU0VSX1BPUlQ6ICcsIEVOVi5VU0VSX1BPUlQpO1xyXG4gIGNvbnNvbGUubG9nKCdFTlYuSE9TVDogJywgRU5WLkhPU1QpO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgaG9zdDogRU5WLkhPU1QsXHJcbiAgICAgIHBvcnQ6IEVOVi5VU0VSX1BPUlQsXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IHNlcnZlci5saXN0ZW4ob3B0aW9ucyk7XHJcbiAgICBzZXJ2ZXIubG9nLmluZm8oc2VydmVyLnJvdXRlKTtcclxuICAgIHNlcnZlci5sb2cuaW5mbygnU3RhcnRlZCB1c2VyIHN1Y2Nlc3NmdWxseScpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmxvZygnZXJyb3IgdXNlcjogJywgZXJyb3IpO1xyXG4gICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gIH1cclxufVxyXG5cclxuc3RhcnQoKTtcclxuIl19