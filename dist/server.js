"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fastify_1 = tslib_1.__importDefault(require("fastify"));
const fastify_cors_1 = tslib_1.__importDefault(require("fastify-cors"));
const fastify_file_upload_await_1 = tslib_1.__importDefault(require("fastify-file-upload-await"));
const fastify_static_1 = tslib_1.__importDefault(require("fastify-static"));
const path_1 = tslib_1.__importDefault(require("path"));
require("reflect-metadata");
//! .env file in config fle
const config_1 = require("./common/config");
//! plugin
const db_1 = require("./common/db/db");
const reply_decorator_1 = require("./common/decorators/reply.decorator");
const authPlugin_1 = require("./common/plugin/authPlugin");
const routes_1 = require("./Employee/routes");
const routes_2 = require("./user/routes");
const server = (0, fastify_1.default)({ logger: true });
server.register(fastify_cors_1.default, { origin: true });
//! upload files
server.register(fastify_static_1.default, {
    root: path_1.default.join(__dirname, '../', 'public'),
    // prefix: '/public'
});
// server.register(fastifyFileUpload);
server.register(fastify_file_upload_await_1.default);
server.register(db_1.dbPlugin);
server.register(authPlugin_1.authPlugin);
server.register(reply_decorator_1.replyDecorator);
server.register(routes_2.routesUserPlugin);
server.register(routes_1.routesEmployeePlugin);
async function start() {
    console.log('ENV.USER_PORT: ', config_1.ENV.USER_PORT);
    console.log('ENV.HOST: ', config_1.ENV.HOST);
    try {
        const options = {
            host: config_1.ENV.HOST,
            port: config_1.ENV.USER_PORT,
        };
        await server.listen(options);
        server.log.info(server.route);
        server.log.info('Started user successfully');
    }
    catch (error) {
        console.log('error user: ', error);
        process.exit(1);
    }
}
start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBOEI7QUFDOUIsd0VBQXVDO0FBQ3ZDLGtHQUErRDtBQUMvRCw0RUFBMkM7QUFDM0Msd0RBQXdCO0FBQ3hCLDRCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IsNENBQXNDO0FBQ3RDLFVBQVU7QUFDVix1Q0FBMEM7QUFDMUMseUVBQXFFO0FBQ3JFLDJEQUF3RDtBQUN4RCw4Q0FBeUQ7QUFDekQsMENBQWlEO0FBRWpELE1BQU0sTUFBTSxHQUFHLElBQUEsaUJBQU8sRUFBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsc0JBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRS9DLGdCQUFnQjtBQUNoQixNQUFNLENBQUMsUUFBUSxDQUFDLHdCQUFhLEVBQUU7SUFDN0IsSUFBSSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7SUFDM0Msb0JBQW9CO0NBQ3JCLENBQUMsQ0FBQztBQUNILHNDQUFzQztBQUN0QyxNQUFNLENBQUMsUUFBUSxDQUFDLG1DQUFzQixDQUFDLENBQUM7QUFFeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFRLENBQUMsQ0FBQztBQUMxQixNQUFNLENBQUMsUUFBUSxDQUFDLHVCQUFVLENBQUMsQ0FBQztBQUM1QixNQUFNLENBQUMsUUFBUSxDQUFDLGdDQUFjLENBQUMsQ0FBQztBQUNoQyxNQUFNLENBQUMsUUFBUSxDQUFDLHlCQUFnQixDQUFDLENBQUM7QUFDbEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyw2QkFBb0IsQ0FBQyxDQUFDO0FBRXRDLEtBQUssVUFBVSxLQUFLO0lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsWUFBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFlBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQyxJQUFJO1FBQ0YsTUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLEVBQUUsWUFBRyxDQUFDLElBQUk7WUFDZCxJQUFJLEVBQUUsWUFBRyxDQUFDLFNBQVM7U0FDcEIsQ0FBQztRQUVGLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqQjtBQUNILENBQUM7QUFFRCxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmYXN0aWZ5IGZyb20gJ2Zhc3RpZnknO1xyXG5pbXBvcnQgRmFzdGlmeUNvcnMgZnJvbSAnZmFzdGlmeS1jb3JzJztcclxuaW1wb3J0IGZhc3RpZnlGaWxlVXBsb2FkQXdhaXQgZnJvbSAnZmFzdGlmeS1maWxlLXVwbG9hZC1hd2FpdCc7XHJcbmltcG9ydCBmYXN0aWZ5U3RhdGljIGZyb20gJ2Zhc3RpZnktc3RhdGljJztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XHJcbi8vISAuZW52IGZpbGUgaW4gY29uZmlnIGZsZVxyXG5pbXBvcnQgeyBFTlYgfSBmcm9tICcuL2NvbW1vbi9jb25maWcnO1xyXG4vLyEgcGx1Z2luXHJcbmltcG9ydCB7IGRiUGx1Z2luIH0gZnJvbSAnLi9jb21tb24vZGIvZGInO1xyXG5pbXBvcnQgeyByZXBseURlY29yYXRvciB9IGZyb20gJy4vY29tbW9uL2RlY29yYXRvcnMvcmVwbHkuZGVjb3JhdG9yJztcclxuaW1wb3J0IHsgYXV0aFBsdWdpbiB9IGZyb20gJy4vY29tbW9uL3BsdWdpbi9hdXRoUGx1Z2luJztcclxuaW1wb3J0IHsgcm91dGVzRW1wbG95ZWVQbHVnaW4gfSBmcm9tICcuL0VtcGxveWVlL3JvdXRlcyc7XHJcbmltcG9ydCB7IHJvdXRlc1VzZXJQbHVnaW4gfSBmcm9tICcuL3VzZXIvcm91dGVzJztcclxuXHJcbmNvbnN0IHNlcnZlciA9IGZhc3RpZnkoeyBsb2dnZXI6IHRydWUgfSk7XHJcbnNlcnZlci5yZWdpc3RlcihGYXN0aWZ5Q29ycywgeyBvcmlnaW46IHRydWUgfSk7XHJcblxyXG4vLyEgdXBsb2FkIGZpbGVzXHJcbnNlcnZlci5yZWdpc3RlcihmYXN0aWZ5U3RhdGljLCB7XHJcbiAgcm9vdDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLycsICdwdWJsaWMnKSxcclxuICAvLyBwcmVmaXg6ICcvcHVibGljJ1xyXG59KTtcclxuLy8gc2VydmVyLnJlZ2lzdGVyKGZhc3RpZnlGaWxlVXBsb2FkKTtcclxuc2VydmVyLnJlZ2lzdGVyKGZhc3RpZnlGaWxlVXBsb2FkQXdhaXQpO1xyXG5cclxuc2VydmVyLnJlZ2lzdGVyKGRiUGx1Z2luKTtcclxuc2VydmVyLnJlZ2lzdGVyKGF1dGhQbHVnaW4pO1xyXG5zZXJ2ZXIucmVnaXN0ZXIocmVwbHlEZWNvcmF0b3IpO1xyXG5zZXJ2ZXIucmVnaXN0ZXIocm91dGVzVXNlclBsdWdpbik7XHJcbnNlcnZlci5yZWdpc3Rlcihyb3V0ZXNFbXBsb3llZVBsdWdpbik7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzdGFydCgpIHtcclxuICBjb25zb2xlLmxvZygnRU5WLlVTRVJfUE9SVDogJywgRU5WLlVTRVJfUE9SVCk7XHJcbiAgY29uc29sZS5sb2coJ0VOVi5IT1NUOiAnLCBFTlYuSE9TVCk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBob3N0OiBFTlYuSE9TVCxcclxuICAgICAgcG9ydDogRU5WLlVTRVJfUE9SVCxcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgc2VydmVyLmxpc3RlbihvcHRpb25zKTtcclxuICAgIHNlcnZlci5sb2cuaW5mbyhzZXJ2ZXIucm91dGUpO1xyXG4gICAgc2VydmVyLmxvZy5pbmZvKCdTdGFydGVkIHVzZXIgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUubG9nKCdlcnJvciB1c2VyOiAnLCBlcnJvcik7XHJcbiAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgfVxyXG59XHJcblxyXG5zdGFydCgpO1xyXG4iXX0=